# based on https://campus.datacamp.com/courses/basic-statistics/lab-0-the-basics-of-r?ex=1

###################################   1 - The basics of R   ##########################
#
##### ##### ##### -------- Arithmetics
#
# Addition # Subtraction # Multiplication # Division
(5 + 5) / 2 * (7 - 1)
# Exponentiation # Modulo
2^5 + 28 %% 6

##### ##### ##### -------- Variables

##### ##### ##### Data Types: 
x <- 42 #integer
z <- 3.2 #numeric
my_logical <- FALSE #logical
w <- "forty_two" #characters

ls() #variables defined at workspace
class(x) # x Data type
is.numeric(x)
y <- as.numeric(x) #enforce data to change type

##### ##### ##### -------- Data Structures
# Vector  -  one-dimension arrays that can hold numeric data, character data, or logical data.
# Matrix  -  collection of elements of the same data type (numeric, character, or logical) arranged into a fixed number of rows and columns. 
# Factors -  statistical data type used to store categorical variables
# DataFrame - A data frame has the variables of a data set as columns and the observations as rows.
# List - gather a variety of objects under one name 

##### ##### ##### -------- Vectors
# Creating a vector
numeric_vector <- c(1, 10, 49)   
character_vector <- c("a", "b", "c")
boolean_vector <- c(TRUE, FALSE, TRUE)
my_vector <- 1:10 # Vector with numerics from 1 up to 10
# Selecting from a vector
character_vector[c(1)]
boolean_vector[c(2,3)]
larger_than_ten <- numeric_vector > 10 
# Selecting only the values larger than 10
numeric_vector[larger_than_ten] 

##### ##### ##### -------- Matrix
# Creating a matrix
m <- matrix(1:20, byrow = TRUE, nrow = 5, ncol = 4)
my_matrix <- matrix(1:9, ncol = 3) # Matrix with numerics from 1 up to 9

##### ##### ##### -------- Factor
student_status <- c("student", "not student", "student", "not student")
# turn student_status vector into a factor and save it in the variable categorical_student
categorical_student <- factor(student_status)
categorical_student
levels(mtcars$am) #checks the levels of factor variables (how much different..)

##### ##### ##### -------- DataFrames
# Contracting a dataFrame
my.dataframe <- data.frame(c1, c2, ...)
my_df <- mtcars[1:10,] # First 10 elements of the built-in data frame 'mtcars'

# Fuctions to inspect a dataframe
head (dataf) # prints the 6 first rows
tail (dataf) # prints the 6 last rows
str (dataf) # prints the structure of the dataframe
dim (dataf) # prints the dimensions
colnames (dataf) # prints the names of the columns

# selecting values 
planet_df
planet_df[1,c(2,3)]
planet_df$diameter

##### ##### ##### -------- Lists 
my_list <- list(my_vector, my_matrix, my_df)
my_list[2]
my_list[[3]][,1]



###################################    2 - More introduction to R   ##########################
# asking for help
?mean
help(mean)
args(mean) # ask for the arguments used by the mean function

##### ##### ##### -------- Functions
grades <- c(8.5, 7, 9, 5.5, 6)
mean (x = grades) # calculate the mean of grades using matching by name
mean(grades)      # calculate the mean of grades using matching by position
grades <- c(8.5, 7, 9, NA, 6)
mean(grades, na.rm = TRUE)

# make a function 
multiply_a_b <- function (a,b){
  return (a*b)
}
# call the function
result <- multiply_a_b(3,7)


# load in the data from a file
data_file <- file("http://s3.amazonaws.com/assets.datacamp.com/course/uva/mtcars.csv")
cars <- read.csv(data_file)
cars <- read.csv(data_file,sep=";")
# Functions to read in data from different formats: 
#read.table: Reads in tabular data such as txt files
#read.csv: Read in data from a comma-separated file format
#readWorksheetFromFile : Reads in an excel worksheet
#read.spss: Reads in data from .sav SPSS format.

getwd() # retrieve the current working directory
setwd() # set the current working directory
list.files() # list all the files in the working directory
library(ggplot2) # load the ggplot2 package using the library function (importing R packages)




###################################    3 - Exploring Data     ##########################

##### ##### ##### -------- Working with Data Frames
dim(mtcars) #dimentions of data set
#Assign the label "high" to mpgcategory where mpg is greater than or equal to 20
mtcars2$mpgcategory[mtcars2$mpg >= 20] <- "high"
#Assign the label "low" to mpgcategory where mpg is less than 20
mtcars2$mpgcategory[mtcars2$mpg < 20] <- "low"
#Assign mpgcategory as factor to mpgfactor
mtcars2$mpgfactor <- as.factor(mtcars2$mpgcategory)
temp <- data.frame(mtcars2$mpg,mtcars2$mpgcategory,mtcars2$mpgfactor)
str(temp)  #variables of data set
levels(mtcars$am)

##### ##### ##### -------- Examining Frequencies
table()  #  To look at a frequency table of the data in R,
#How many of the cars have a manual transmission?
am.in.cars <- table(mtcars$am)
am.in.cars

num.of.cars.manual <- am.in.cars[[2]][1]
num.of.cars.manual

##### ##### ##### -------- Making a Bar Graph (good for categorical variables)
height  <- table(mtcars$am)
barplot(height)
barnames <- c("automatic","manual")
# Label the y axis "number of cars" and label the bars using barnames
barplot(height,names.arg=barnames,ylab="number of cars")


##### ##### ##### -------- Making an Histograms (good for quantative continuous variables)
hist(mtcars$carb,main="Carburetors",xlab="Numer of carburators")
# arguments to change the y-axis scale to 0 - 20, label the x-axis and colour the bars red
hist(mtcars$carb, main = "Carburetors",ylim=c(0,20),col="red",xlab="Number of Carburetors")


##### ##### ##### -------- Mean, Median and Mode
mean(mtcars$mpg)
median(mtcars$mpg)
# Produce a sorted frequency table to find a Mode
f <- table(mtcars$carb)
sort(f,decreasing = TRUE)


##### ##### ##### -------- Range
sorted <- sort(mtcars$mpg)
x <- min(sorted) # Minimum value
y <- max(sorted) # Maximum value
# Calculate the range of mpg using x and y
range_of <- y - x
# or
range(sorted)

##### ##### ##### -------- Quartiles
q <-quantile(mtcars$qsec)
q[[2]][1] # the value of the first quartile?
q[[3]][1] # the value of the second quartile?

# Make a boxplot of qsec
boxplot(mtcars$qsec)
# Calculate the interquartile range of qsec
IQR(mtcars$qsec)
threshold <- IQR(mtcars$qsec)*1.5


##### ##### ##### -------- Standart Deviation
# Find the standard deviation of miles per gallon
sd(mtcars$mpg)

##### ##### ##### -------- Calculating Z-scores
# Calculate the z-scores of mpg
m <- mtcars$mpg
mtcars$mpg
m_mean <- mean(m)
m_sd <- sd(m)
mmm <- c((m - m_mean)/sd(m))
mmm


###################################    4 - Correlation and Regression     ##########################

##### ##### ##### -------- Scatterplots
# Plot height and weight of the "women" dataset. Make the title "Heights and Weights"
plot(women$weight,women$height,main = "Heights and Weights")

##### ##### ##### -------- Contingency table 
str(smoking)
table(smoking$tobacco,smoking$student)

##### ##### ##### -------- Regression
You've conducted a study looking at how much money people have (dependent variable)
and their education level (independent variable).
Let's check some different things in your data!
cor(var1,var2) 
# your data
money <- c(4, 3, 2, 2, 8, 1, 1, 2, 3, 4, 5, 6, 7, 9, 9, 8, 12)
education <- c(3, 4, 6, 9, 3, 3, 1, 2, 1, 4, 5, 7, 10, 8, 7, 6, 9)

# calculate the correlation between X and Y
cor(education,money)

# save regression coefficients as object "line"
line <- lm(money ~ education)

# print the regression coefficients
lm(education ~ money)

# plot Y and X
plot(education,money,main="My Scatterplot")

# add the regression line
abline(line)
abline(mean(money),0,col="blue")

###################################    5 -      ##########################

